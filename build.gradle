
buildscript {
    repositories {
        mavenCentral()
    }
    ext.kotlin_version = '1.6.0'
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'idea'

    //kotlin
    id 'org.jetbrains.kotlin.jvm' version '1.6.0' apply false
    id 'com.google.devtools.ksp' version '1.6.21-1.0.6'

    //javafx
    id 'application' // this plugin can generate bat exec file by adding "application{}" below
    id 'org.openjfx.javafxplugin' version '0.0.9'

    //use jlink to do modular work
    id 'org.beryx.jlink' version '2.23.1'

}

configurations {
    testCompile
}


//
//configure() {
////    kotlinOptions { // it can make intellij use correct bytecode version in editor
////        jvmTarget = "1.8"
////    }
//}

// application plugin
/*application{

}*/

//java fx
javafx {
    version = "19"
    // javafx.controls: javafx components that can controls some functionality in app, like button, radio button, table, etc.
    // javafx.fxml: an xml language to describe javafx UI layout
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}
//define application main class in javaFx app
mainClassName = "com.myna.FxApplication"

// jlink task
// we use jlink to extract the module we want from project
// to make modular work, we need module-info.java at the project root to declare requirements, exports, etc.
jlink {
    // commands args:
    // --compress 2: compress resources with zip format
    // --strip-debug: not shows debug from the output image
    // reference at : https://docs.oracle.com/javase/9/tools/jlink.htm#JSWOR-GUID-CECAC52B-CFEE-46CB-8166-F17A8E9280E9
    options = [
            '--strip-debug',
            '--compress', '2',
    //        '--no-header-files',
    //        '--no-man-pages'
    ]
    launcher {
        name = "hellofx"
    }
}


repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    //jcenter()
    mavenCentral()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:28.0-jre'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.4.2'
    implementation 'org.projectlombok:lombok:1.18.16'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.assertj:assertj-core:3.18.1'

    implementation 'com.google.code.gson:gson:2.8.6'
	
	//JOGL dependencies
    implementation "org.jogamp.gluegen:gluegen-rt:2.3.2"
    implementation "org.jogamp.jogl:jogl-all:2.3.2"

    //lombok
    implementation 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'

    testImplementation 'org.projectlombok:lombok:1.18.22'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'


    runtimeOnly "org.jogamp.gluegen:gluegen-rt:2.3.2:natives-windows-amd64"
    runtimeOnly "org.jogamp.jogl:jogl-all:2.3.2:natives-windows-amd64"


    implementation "org.jetbrains.kotlin:kotlin-stdlib"

    // ksp
    implementation 'com.google.devtools.ksp:symbol-processing-api:1.6.21-1.0.6'

}


